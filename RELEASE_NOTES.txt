
Version
----------
SLOB 2.5.2.4


NEW IN THIS RELEASE
-------------------
This is a bug-fix release.

NEW IN PREVIOUS RELEASES
-------------------
2.5
The SLOB Method centers on the ability to generate maximum I/O from absolute minimum
processor utilization. When testing write-intensive SLOB (non-zero slob.conf->UPDATE_PCT),
SLOB historically updated columns to the same string value to reduce CPU overhead. A
notable SLOB user and Oracle expert, Maris Elsins ( @MarisDBA ) found that a redo 
optimization introduced in Oracle Database 12c Release 12.2 essentially short-circuits 
generating redo when updating certain column values to the same value. I'm sure this 
is a good optimization for real world workloads but it severely reduces the amount of 
redo generated by SLOB when testing with non-zero UPDATE_PCT. Maris was very nice to 
share his analysis in the following blog post:
 
	https://blog.pythian.com/redo-volume-optimization-in-12c-r2/.

I want to thank Maris for finding the issue and proposing an alternative procedure for
non-zero UPDATE_PCT testing. The essence of what Maris proposed has been implemented in
this release of SLOB, however, I did not adopt his specific approach because under testing
I found that it increased the processor overhead at an unacceptable level. I will blog 
about that overhead in a blog post on kevinclosson.net because users might take interest
in how a relatively small increase in processor overhead reduces the amount of physical
I/O generated. As I always say, "Everything is a CPU problem."

Thanks, Maris for finding, analyzing and sharing what you discovered in the blog post
I've cited above! Much appreciated!

The SLOB changes to address this Oracle Database Release 12.2 change are found in slob.sql 
and misc/procedure.sql.

I've also enhanced runit.sh and setup.sh with both bug fixes and improvements. None of the
changes will affect your baselines. However, you will need to execute misc/procedure.sql
to get the new procedure. If you don't, slob.sql will fail. Interactively recreating the
procedure in misc/procedure.sql will allow you to continue with SLOB 2.5.0 without
reloading your SLOB data. Simply execute misc/procedure.sql as either user1 or SYSTEM.

2.4
* Short Table Scans. 
This release introduces the ability to direct SLOB sessions to perform 
a percentage of all SELECT statements as full table scans against a small, non-indexed table. 
However, the size of the "scan table" is configurable.

* Statspack Support. 
This version, by default, generates STATSPACK reports instead of 
Automatic Workload Repository (AWR) reports. This means that SLOB testing can be conducted 
against Oracle Database editions that do not support AWR--as well as the ability 
to test Enterprise Edition with fewer software licensing concerns. AWR reports can be generated 
after a simple modification to the slob.conf file.

* External Script Execution. 
House-keeping of test results files and the ability to, for example, 
issue a remote command to a storage array to commence data collection is introduced by the 
EXTERNAL_SCRIPT feature in SLOB 2.4.

ADDITIONAL CHANGES
------------------
SLOB 2.4 has been tested on public cloud configurations to include Amazon Web Services RDS for Oracle. 
The changes in SLOB 2.4 to slob.conf parameters, and other infrastructure, makes SLOB 2.4 
the cloud predictability and repeatability testing tool of choice as of SLOB 2.4.

ADDITIONAL INFO
---------------
Please see the documentation in the SLOB/doc directory.

ATTRIBUTIONS
-----------
Users in the SLOB user community assisted with this release with non-trivial contributions. I'd like to
say thanks, and give proper attribution, to the following SLOB users for their help:

	* Chris Osborne (@westendwookie): 
		Chris provided a functional prototype of the new SLOB 2.4 Scan Table Feature. 
		Thanks, Chris!
	* Christian Antognini (@ChrisAntognini): 
		Chris provided a functional prototype of the new SLOB 2.4 support for statspack! 
		Thanks, Chris!
	* James Morle (@JamesMorle): 
		James has helped with several scalability improvements in slob.sql based on his 
		astonishing high-end SLOB testing. With thousands of sessions attached to a dozen 
		or more state-of-the-art Xeon hosts connected to NVM storage led to several issues 
		with proper start/stop synchronization and thus reduced repeatability. James also 
		created the new SLOB 2.4 EXTERNAL_SCRIPT feature. As always, thanks, James!
	* Maciej Przepiorka (@mPrzepiorka): 
		Maciej conducted very thorough Beta testing and enhanced the EXTERNAL_SCRIPT feature 
		in SLOB 2.4. Thanks, Maciej.
	* Martin Berger (@martinberx): 
		Martin conducted significant Standard Edition testing and also enhanced the 
		SLOB/misc/awr_info.sh (SLOB/misc/statspack_info.sh) script for producing performance 
		data in tuple form from statspack. Thanks, Martin!
	* Maris Elsins (@MarisElsins):
		Maris discovered, analyzed and reported the Oracle Database Release 12.2
		that broke redo generation when testing SLOB with non-zero slob.conf->UPDATE_PCT.
	* Rodrigo Nascimento, Joe Carter and Scott Lane
		Thanks to these fine folks from Netapp for testing the undocumented obfuscated columns feature 
		(https://kevinclosson.net/2019/11/19/announcing-obfuscated-column-data-loading-with-slob/) which
		became usable in SLOB 2.5.2. Thank you all for such great testing and feedback!
